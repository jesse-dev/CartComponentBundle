<?php

namespace JesseHanson\MobileCartBundle\CartComponent;

use JesseHanson\MobileCartBundle\CartComponent\Cart;
use JesseHanson\MobileCartBundle\CartComponent\Item;
use JesseHanson\MobileCartBundle\CartComponent\Shipment;
use JesseHanson\MobileCartBundle\CartComponent\DiscountCondition;
use JesseHanson\MobileCartBundle\CartComponent\DiscountConditionCompare;

/**
 * Basic Discount object
 * Discounts are applied as a flat amount or a percentage.
 * Discounts can be applied to shipments or items in general, or to specific items, shipments
 * If a Discount is declared as 'specified', the Items and Shipments specified within the Discount
 *  will not be able to be discounted by other general or non-specific Discounts.
 * Items and Shipments within multiple specified-type discounts can be discounted more than once, 
 *  as well as for non-specified-type Discounts. (they are mutually exclusive however)
 *
 * (c) Jesse Hanson [jessehanson.com]
 */

class Discount 
{
	/**
	 * @var string|int
	 */
	protected $_id; // YOUR Discount/Rule Id

	/**
	 * @var array
	 */
	protected $_discountConditions; // discountConditions[key] = DiscountCondition object

	/**
	 * @var DiscountConditionCompare
	 */
	protected $_criteriaConditionCompare;

	/**
	 * @var DiscountConditionCompare
	 */
	protected $_targetConditionCompare;

	/*
	[compare-1] => array(
		[op] = and,
	    [0] => array(
	        [op] = and,
	        [left] = condition-1,
	        [right] = condition-2,
	    ),
	    [1] => array(
			[op] = or,
			[left] = rule-3,
			[right] = [compare-2] => array(
				[op] = or,
				[left] = condition-4,
				[right] = condition-5,
			)
	    ),
	)
	*/

	/**
	 * @var string
	 */
	protected $_as; // percent|flat

	/**
	 * @var string
	 */
	protected $_name;

	/**
	 *
	 */
	protected $_startDatetime;

	/**
	 *
	 */
	protected $_endDatetime;

	/**
	 * @var int
	 */
	protected $_priority; // YOUR Discount/Rule priority

	/**
	 * @var float
	 */
	protected $_value; // eg 2.50 is a flat discount, 0.25 is 25% off, 

	/**
	 * @var string
	 */
	protected $_to; // products|shipping|specified

	/**
	 * @var array of Item, key => quantity
	 */
	protected $_items;

	/**
	 * @var array of Shipment, key => key
	 */
	protected $_shipments;

	/**
	 * @var bool
	 */
	protected $_isPreTax; // either before or after tax

	/**
	 * @var bool
	 */
	protected $_isAuto; // system will try to apply it automatically

	/**
	 * @var bool
	 */
	protected $_isStopper;

	/**
	 * @var string
	 */
	protected $_couponCode; // should already be validated

	// array key values
    static $asFlat = 'flat';
    static $asPercent = 'percent';
    static $toSpecified = 'specified';
    static $toShipments = 'shipments';
    static $toItems = 'items';

    static $prefix = 'discount-'; // array key prefix

    
	public function __construct()
	{
		$this->reset();
	}

	/**
	 * Get key for associative arrays
	 */
	static function getKey($id)
	{
		return self::$prefix . $id;
	}

	/**
	 * Serialize object as string
	 */
	public function __toString()
    {
        return $this->toJson();
    }

	/**
	 * Serialize object as json
	 */
	public function toJson()
	{
		return json_encode($this->toArray());
	}

	/**
	 * Serialize object as array
	 */
	public function toArray()
	{
		return array(
			'id'   		  => $this->getId(),
			'name'        => $this->getName(),
			'value'       => $this->getValue(),
			'as'          => $this->getAs(),
			'to'          => $this->getTo(),
			'is_pre_tax'  => $this->getIsPreTax(),
			'is_auto' 	  => $this->getIsAuto(),
			'coupon_code' => $this->getCouponCode(),
			'items'       => $this->getItemsAsArray(),
			'shipments'   => $this->getShipmentsAsArray(),
			//'criteria_conditions' => $this->getCriteriaConditionCompare()->toArray(),
			//'target_conditions' => $this->getTargetConditionCompare()->toArray(),
			'is_stopper'  => $this->getIsStopper(),
			'priority'    => $this->getPriority(),
		);
	}

	/**
	 * Import composition from json
	 */
	public function importJson($json, $reset = true)
	{
		$data = @ (array) json_decode($json);

		if ($reset) {
			$this->reset();
		}

		$id = isset($data['id']) ? $data['id'] : '';
		$name = isset($data['name']) ? $data['name'] : '';

		$as = isset($data['as']) ? $data['as'] : '';
		$as = ($as == self::$asFlat) ? self::$asFlat : self::$asPercent;

		$to = isset($data['to']) ? $data['to'] : '';
		if (!in_array($to, array(self::$toSpecified, 'items', 'shipments'))) {
			$to = 'items';
		}

		$value = isset($data['value']) ? $data['value'] : 0;
		$isPreTax = isset($data['is_pre_tax']) ? $data['is_pre_tax'] : false;

		$toItems = isset($data['items']) ? $data['items'] : array();
		$toShipments = isset($data['shipments']) ? $data['shipments'] : array();

		/*
		$discountConditions = isset($data['conditions']) ? $data['conditions'] : array();
		$this->_discountConditions = array();
		if (count($discountConditions) > 0) {
			foreach($discountConditions as $prefixedKey => $conditionData) {
				$conditionJson = json_encode($conditionData);
				$discountCondition = new DiscountCondition();
				$discountCondition->importJson($conditionJson);
				$this->addDiscountCondition($discountCondition);
			}
		}//*/

		$couponCode = isset($data['coupon_code']) ? $data['coupon_code'] : '';
		$isAuto = isset($data['is_auto']) ? $data['is_auto'] : false;

		$isStopper = (bool) isset($data['is_stopper']) ? $data['is_stopper'] : false;
		$priority = isset($data['priority']) ? $data['priority'] : 0;

		$this->_id = $id;
		$this->_name = $name;
		$this->_as = $as;
		$this->_to = $to;
		$this->_value = $value;
		$this->_isPreTax = $isPreTax;
		$this->_isAuto = $isAuto;

		$this->_isStopper = $isStopper;
		$this->_priority = $priority;

		$this->_couponCode = $couponCode;
		$this->_items = $toItems;
		$this->_shipments = $toShipments;

		return $this;
	}

	/**
	 *
	 */
	public function importEntity($entity)
	{
		$id = $entity->getId();
		$name = $entity->getName();
		$as = $entity->getAs();
		$to = $entity->getTo();
		$value = $entity->getValue();
		$isPreTax = $entity->getIsPreTax();
		$isAuto = $entity->getIsAuto();

		$isStopper = $entity->getIsStopper();
		$priority = $entity->getPriority();

		$couponCode = $entity->getCouponCode();

		$toItems = array(); // won't know this until we validate conditions
		
		$toShipments = array(); // won't know this until we validate conditions

		$this->_id = $id;
		$this->_name = $name;
		$this->_as = $as;
		$this->_to = $to;
		$this->_value = $value;
		$this->_isPreTax = $isPreTax;
		$this->_isAuto = $isAuto;

		$this->_isStopper = $isStopper;
		$this->_priority = $priority;

		$this->_couponCode = $couponCode;
		$this->_items = $toItems;
		$this->_shipments = $toShipments;

		/*
		$this->_discountConditions = array();
		if ($entity->hasDiscountConditions()) {
			foreach($entity->getDiscountConditions() as $conditionEntity) {
				$discountCondition = Factory::createDiscountConditionFromEntity($conditionEntity);
				$discount->addDiscountCondition($discountCondition);
			}
		}//*/

		return $this;
	}

	/**
	 * Reset object to defaults
	 */
	public function reset()
	{
		$this->_id = 0;
		$this->_name = '';
		$this->_as = self::$asFlat;
		$this->_to = self::$toItems;
		$this->_value = 0;
		$this->_isPreTax = false;
		$this->_isAuto = false;
		$this->_couponCode = '';
		$this->_items = array();
		$this->_shipments = array();

		$this->_criteriaConditionCompare = null;
		$this->_targetConditionCompare = null;

		return $this;
	}

	/**
	 * Accessor
	 */
	public function getId()
	{
		return $this->_id;
	}

	/**
	 * Mutator
	 */
	public function setId($id)
	{
		$this->_id = $id;
		return $this;
	}

	/**
	 * Accessor
	 */
	public function getName()
	{
		return $this->_name;
	}

	/**
	 * Mutator
	 */
	public function setName($name)
	{
		$this->_name = $name;
		return $this;
	}

	/**
	 *
	 */
	public function getCriteriaConditionCompare()
	{
		return $this->_criteriaConditionCompare;
	}

	/**
	 *
	 */
	public function setCriteriaConditionCompare(DiscountConditionCompare $compare)
	{
		$this->_criteriaConditionCompare = $compare;
		return $this;
	}

	/**
	 *
	 */
	public function getTargetConditionCompare()
	{
		return $this->_targetConditionCompare;
	}

	/**
	 *
	 */
	public function setTargetConditionCompare(DiscountConditionCompare $compare)
	{
		$this->_targetConditionCompare = $compare;
		return $this;
	}

	/**
	 * Accessor
	 */
	public function getAs()
	{
		return $this->_as;
	}

	/**
	 * Mutator
	 */
	public function setAs($as)
	{
		$this->_as = $as;
		return $this;
	}

	/**
	 * Accessor
	 */
	public function getValue()
	{
		return $this->_value;
	}

	/**
	 * Mutator
	 */
	public function setValue($value)
	{
		$this->_value = $value;
		return $this;
	}

	/**
	 * Accessor
	 */
	public function getTo()
	{
		return $this->_to;
	}

	/**
	 * Mutator
	 */
	public function setTo($to)
	{
		$this->_to = $to;
		return $this;
	}

	/**
	 * Accessor
	 */
	public function getIsPreTax()
	{
		return $this->_isPreTax;
	}

	/**
	 * Mutator
	 */
	public function setIsPreTax($beforeTax)
	{
		$this->_isPreTax = $beforeTax;
		return $this;
	}

	/**
	 * Accessor
	 */
	public function getIsAuto()
	{
		return $this->_isAuto;
	}

	/**
	 * Mutator
	 */
	public function setIsAuto($isAuto)
	{
		$this->_isAuto = $isAuto;
		return $this;
	}

	/**
	 * Accessor
	 */
	public function getCouponCode()
	{
		return $this->_couponCode;
	}

	/**
	 * Mutator
	 */
	public function setCouponCode($couponCode)
	{
		$this->_couponCode = $couponCode;
		return $this;
	}

	// DEV NOTE:
	// Items and Shipments are only for specified discounts
	// set $this->_to = self::$toSpecified

	/**
	 *
	 */
	public function getItemsAsArray()
	{
		$items = array();

		return $items;
	}

	/**
	 * Accessor
	 */
	public function getItems()
	{
		return $this->_items;
	}

	/**
	 * Add an Item to this Discount
	 */
	public function addItem(Item $item, $qty = 1)
	{
		$key = Item::getKey($item->getId());
		$this->_items[$key] = $qty;
		return $this;
	}

	/**
	 * Remove an Item from this Discount
	 */
	public function removeItem($key)
	{
		if (isset($this->_items[$key])) {
			unset($this->_items[$key]);
		}
		return $this;
	}

	/**
	 * Assert item exists
	 *
	 * @param string itemKey
	 * @return boolean hasItem
	 */
	public function hasItem($key)
	{
		return isset($this->_items[$key]);
	}

	/**
	 * Set quantity to item
	 */
	public function setItemQty($key, $qty)
	{
		if (isset($this->_items[$key])) {
			$this->_items[$key] = $qty;
		}
		return $this;
	}

	/**
	 *
	 */
	public function getShipmentsAsArray()
	{
		$shipments = array();
		if (!count($this->getShipments())) {
			return $shipments;
		}

		foreach($this->getShipments() as $shipment) {
			$key = Shipment::getKey($shipment->getId());
			$shipments[$key] = $shipment->toArray();
		}

		return $shipments;
	}

	/**
	 * Accessor
	 */
	public function getShipments()
	{
		return $this->_shipments;
	}

	/**
	 * Add a Shipment to this Discount
	 */
	public function addShipment(Shipment $shipment)
	{
		$key = Shipment::getKey($shipment->getId());
		$this->_shipments[$key] = $key;
		return $this;
	}

	/**
	 * Remove an Item from this Discount
	 */
	public function removeShipment($key)
	{
		if (isset($this->_shipments[$key])) {
			unset($this->_shipments[$key]);
		}
		return $this;
	}

	/**
	 * Assert shipment exists
	 *
	 * @param string itemKey
	 * @return boolean hasItem
	 */
	public function hasShipment($key)
	{
		return isset($this->_shipments[$key]);
	}

	/**
	 *
	 */
	public function getIsStopper()
	{
		return $this->_isStopper;
	}

	/**
	 *
	 */
	public function setIsStopper($isStopper)
	{
		$this->_isStopper = (bool) $isStopper;
		return $this;
	}

	/**
	 *
	 */
	public function getPriority()
	{
		return $this->_priority;
	}

	/**
	 *
	 */
	public function setPriority($priority)
	{
		$this->_priority = $priority;
		return $this;
	}

}